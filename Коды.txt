Ты можешь делиться результатами с друзьями при помощи export tree и import tree

Хочешь создать классный уровень? Сделай это при помощи build level или добавь уровень друга при помощи import level

Команда show commands покажет все доступные инструкции. Там есть очень полезные, например undo и reset

А пока просто начни игру при помощи levels...

git commit - мы только что внесли изменения в репозиторий и сохранили их как коммит. У коммита, который мы только что сделали, есть родитель, С1, который указывает на предыдущий коммит.
git branch newImage - Создадим здесь новую ветку с именем newImage.
git checkout newImage - Эта команда перенесёт нас на новую ветку в момент, когда мы ещё не коммитили изменения.
git checkout -b bugFix; git commit - создать новую ветку и переключиться на неё.
git merge bugFix - Мы сделаем merge ветки bugFix в ветку main. Выполнив слияние.
git checkout bugFix; git merge main - каждая ветка содержит все изменения репозитория!
git rebase main - позволяет слить сдвинуть наши изменения из bugFix прямо на вершину ветки main. Благодаря этому всё будет выглядеть, как будто эти изменения делались последовательно, хотя на самом деле - параллельно.
git checkout main^ - Перемещение на один коммит назад
git checkout main~<num> - Перемещение на num коммит назад
git branch -f main HEAD~3 - Переместит (принудительно) ветку main на три родителя назад от HEAD.Можно напрямую прикрепить ветку к коммиту при помощи опции -f
git reset - отменяет изменения, перенося ссылку на ветку назад, на более старый коммит. Это своего рода "переписывание истории"; 
git revert - Чтобы отменить изменения и поделиться отменёнными изменениями с остальными, надо использовать 
git cherry-pick <Commit1> <Commit2> <...> - Это очень простой и прямолинейный способ сказать, что ты хочешь копировать несколько коммитов на место, где сейчас находишься (HEAD). Мы обожаем cherry-pick за то, что в нём очень мало магии и его очень просто понять и применять.
git rebase -i HEAD~4 - Всё, что нужно для интерактивного rebase - это опция -i


https://www.youtube.com/channel/UCADGYy0-B61dBi6Lscfhqgg/featured
https://webdevkin.ru/courses/git/git-branch
https://smartprogress.do/goal/359341/
https://github.com/pcottle/learnGitBranching/issues/385

git checkout newImage
git commit --amend
git cherry-pick caption
git branch -f main newImage
   [and perhaps]
git checkout main



git tag v1 C1 - создание тега и привязка.
git describe <ref> - помогает сориентироваться после отката на много коммитов по истории изменений. Такое может случиться, когда вы сделали git bisect или если вы недавно вернулись из отпуска =)

show solution;

reset --forSolution;

git checkout one;

git cherry-pick C4 C3 C2;

git checkout two;

git cherry-pick C5 C4 C3 C2;

git branch -f three C2;
